{"version":3,"sources":["App.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","counter","createData","tick","data","price","p","amount_without_signal","q","market","m","key","exchange","amount","useStyles","makeStyles","table","minWidth","App","classes","useState","rows","setRows","webSocket","useRef","useEffect","current","WebSocket","onmessage","row","JSON","parse","prev","close","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","map","ReactDOM","render","document","getElementById"],"mappings":"2QAWMA,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAC7CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEEC,EAAiBZ,aAAW,SAACC,GAAD,MAAY,CAC5CY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,OAAOC,WAHrBf,CAMnBgB,KAEAC,EAAU,EACd,SAASC,EAAWC,GAAO,IAAD,EAC+BA,EAAKC,KAAlDC,EADc,EAChBC,EAAWC,EADK,EACPC,EAA2BC,EADpB,EACkBC,EAG1C,MAAO,CACLC,IAAKV,IACLW,SAAU,UACVP,QACAQ,OANaJ,EAASF,GAA+C,EAAvBA,GAUlD,IAAMO,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAIC,SAASC,IACtB,IAAMC,EAAUL,IADY,EAEJM,mBAAS,IAFL,mBAErBC,EAFqB,KAEfC,EAFe,KAGtBC,EAAYC,iBAAO,MAczB,OAZAC,qBAAU,WASR,OAPAF,EAAUG,QAAU,IAAIC,UAAU,0DAClCJ,EAAUG,QAAQE,UAAY,SAACC,GAE7B,IAAM1B,EAAO2B,KAAKC,MAAMF,EAAIzB,MAE5BkB,GAAQ,SAACU,GAAD,OAAW9B,EAAWC,IAAtB,mBAAgC6B,QAEnC,kBAAMT,EAAUG,QAAQO,WAC9B,IAGD,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOC,UAAWnB,EAAQH,MAAOuB,aAAW,mBAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAACxC,EAAA,EAAD,WACE,cAACjB,EAAD,uBACA,cAACA,EAAD,CAAiB0D,MAAM,QAAvB,mBACA,cAAC1D,EAAD,CAAiB0D,MAAM,QAAvB,yBAGJ,cAACC,EAAA,EAAD,UACGrB,EAAKsB,KAAI,SAACd,GAAD,OACR,eAACjC,EAAD,WACE,cAACb,EAAD,CAAiB0D,MAAM,QAAvB,SAAgCZ,EAAIjB,WACpC,cAAC7B,EAAD,CAAiB0D,MAAM,QAAvB,SAAgCZ,EAAIxB,QACpC,cAACtB,EAAD,CAAiB0D,MAAM,QAAvB,SAAgCZ,EAAIhB,WAHjBgB,EAAIlB,eClErCiC,IAASC,OAAO,cAAC3B,EAAD,IAAS4B,SAASC,eAAe,W","file":"static/js/main.a475984a.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nlet counter = 1;\nfunction createData(tick) {\n  const { p:price, q:amount_without_signal, m:market } = tick.data;\n  const amount = market ? amount_without_signal : amount_without_signal*-1;\n\n  return {\n    key: counter++,\n    exchange: \"binance\",\n    price,\n    amount,\n  };\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n  },\n});\n\nexport default function App() {\n  const classes = useStyles();\n  const [rows, setRows] = useState([]);\n  const webSocket = useRef(null);\n\n  useEffect(() => {\n    // ['bitfinex', 23320, 0.00012313]\n    webSocket.current = new WebSocket(\"wss://fstream.binance.com/stream?streams=btcusdt@trade\");\n    webSocket.current.onmessage = (row) => {\n      // console.log(row);\n      const tick = JSON.parse(row.data);\n      //console.log(tick);\n      setRows((prev) => [createData(tick), ...prev]);\n    };\n    return () => webSocket.current.close();\n  }, []);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Exchange</StyledTableCell>\n            <StyledTableCell align=\"right\">Prize</StyledTableCell>\n            <StyledTableCell align=\"right\">Amount</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <StyledTableRow key={row.key}>\n              <StyledTableCell align=\"right\">{row.exchange}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.price}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.amount}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import injectTapEventPlugin from 'react-tap-event-plugin';   // add\n\nimport './index.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\n\n// injectTapEventPlugin();  // add\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();"],"sourceRoot":""}